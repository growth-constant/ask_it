DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.7ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.5ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.5ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.5ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.5ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.5ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
DEPRECATION WARNING: Initialization autoloaded the constants AskIt::Survey, Survey, and Survey::BelongsToLesson.

Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.

Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload AskIt::Survey, for example,
the expected changes won't be reflected in that stale Class object.

`config.autoloader` is set to `classic`. These autoloaded constants would have been unloaded if `config.autoloader` had been set to `:zeitwerk`.

In order to autoload safely at boot time, please wrap your code in a reloader
callback this way:

    Rails.application.reloader.to_prepare do
      # Autoload classes and modules needed at boot time here.
    end

That block runs when the application boots, and every time there is a reload.
For historical reasons, it may run twice, so it has to be idempotent.

Check the "Autoloading and Reloading Constants" guide to learn more about how
Rails autoloads and reloads.
 (called from <top (required)> at /Users/chingaman/Projects/build-it/vendor/ruby/ask_it/spec/dummy/config/environment.rb:7)
  [1m[35m (0.6ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
  [1m[35m (0.0ms)[0m  [1m[34mSELECT sqlite_version(*)[0m
